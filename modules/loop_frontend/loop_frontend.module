<?php
/**
 * @file
 * Code for the Loop frontend module.
 */

include_once 'loop_frontend.features.inc';

/**
 * Implements template_preprocess_html().
 */
function loop_frontend_preprocess_html(&$variables) {
  // Load Respond.js library.
  drupal_add_js(loop_frontend_get_library_file('respondjs', 'respond.min.js'), array(
    'type' => 'external',
    'scope' => 'header',
    'group' => JS_LIBRARY,
    'preprocess' => FALSE,
    'every_page' => TRUE,
    'weight' => -997,
  ));
}

/**
 * Helper function gets the path to a libraries file.
 *
 * @param string $libpath
 *   The name of library path.
 * @param string $libfile
 *   The filename of the library.
 *
 * @return string
 *   The full path to external library.
 */
function loop_frontend_get_library_file($libpath, $libfile) {
  // If Libraries API is enabled,
  // make sure the file exists before pointing there.
  if (function_exists('libraries_get_path') && file_exists(libraries_get_path($libpath))) {
    $path = '/' . libraries_get_path($libpath);
    $path .= '/' . $libfile;
  }
  else {
    $path = NULL;
  }

  return $path;
}

function loop_frontend_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'field_collection_view':

    $view_mode = !empty($display['settings']['view_mode']) ? $display['settings']['view_mode'] : 'full';
    foreach ($items as $delta => $item) {
      if ($field_collection = field_collection_field_get_entity($item)) {

        $element[$delta]['#theme_wrappers'] = array('field_collection_view');
        $element[$delta]['#attributes']['class'][] = 'field-collection-view';
        $element[$delta]['#attributes']['class'][] = 'clearfix';
        $element[$delta]['#attributes']['class'][] = 'loop-field-collection-view-inline-links';
        $element[$delta]['#attributes']['class'][] = drupal_clean_css_identifier('view-mode-' . $view_mode);

        $links = array(
          '#theme' => 'links__field_collection_view',
        );
        $links['#attributes']['class'][] = 'field-collection-view-links';
        foreach (array('edit', 'delete') as $op) {
          if ($settings[$op] && field_collection_item_access($op == 'edit' ? 'update' : $op, $field_collection)) {
            $links['#links'][$op] = array(
              'title' => entity_i18n_string("field:{$field['field_name']}:{$instance['bundle']}:setting_$op", $settings[$op]),
              'href' => $field_collection->path() . '/' . $op,
              'query' => drupal_get_destination(),
            );
          }
        }
        $element[$delta]['links'] = $links;
        $element[$delta]['entity'] = $field_collection->view($view_mode);
      }
    }
    field_collection_field_formatter_links($element, $entity_type, $entity, $field, $instance, $langcode, $items, $display);
    if (!empty($items) || !empty($element['#suffix'])) {
      $element['#attached']['css'][] = drupal_get_path('module', 'field_collection') . '/field_collection.theme.css';
    }
    break;
  }

  return $element;
}

function loop_frontend_field_formatter_info_alter(&$info) {
  $info['field_collection_view']['module'] = 'loop_frontend';
}
